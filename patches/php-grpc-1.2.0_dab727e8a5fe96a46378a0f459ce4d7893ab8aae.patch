From dab727e8a5fe96a46378a0f459ce4d7893ab8aae Mon Sep 17 00:00:00 2001
From: Alexandr Zolotukhin <supersmile2009@gmail.com>
Date: Tue, 10 Mar 2020 12:08:17 -0400
Subject: [PATCH] Add an option to generate one interface per method

Fix namespaces in method interfaces
---
 cmd/protoc-gen-php-grpc/php/generate.go       |  33 +++++-
 .../php/template_method_interface.go          | 112 ++++++++++++++++++
 ...plate.go => template_service_interface.go} |  35 +++---
 src/MethodInterface.php                       |  19 +++
 4 files changed, 178 insertions(+), 21 deletions(-)
 create mode 100644 cmd/protoc-gen-php-grpc/php/template_method_interface.go
 rename cmd/protoc-gen-php-grpc/php/{template.go => template_service_interface.go} (94%)
 create mode 100644 src/MethodInterface.php

diff --git a/cmd/protoc-gen-php-grpc/php/generate.go b/cmd/protoc-gen-php-grpc/php/generate.go
index 608b275..3f7245a 100644
--- a/cmd/protoc-gen-php-grpc/php/generate.go
+++ b/cmd/protoc-gen-php-grpc/php/generate.go
@@ -25,15 +25,34 @@ package php
 import (
 	"github.com/golang/protobuf/protoc-gen-go/descriptor"
 	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
+	"strconv"
+	"strings"
 )
 
 // Generate generates needed service classes
 func Generate(req *plugin.CodeGeneratorRequest) *plugin.CodeGeneratorResponse {
 	resp := &plugin.CodeGeneratorResponse{}
 
+	filePerMethod := false
+	configName := "FilePerMethod="
+	for _, config := range strings.Split(req.GetParameter(), ",") {
+		if strings.HasPrefix(config, configName) {
+			val, err :=  strconv.ParseBool(strings.TrimPrefix(config, configName))
+			if err != nil {
+				panic(err)
+			}
+			filePerMethod = val
+		}
+	}
 	for _, file := range req.ProtoFile {
 		for _, service := range file.Service {
-			resp.File = append(resp.File, generate(req, file, service))
+			if filePerMethod == true {
+				for _, method := range service.Method {
+					resp.File = append(resp.File, generateMethod(req, file, service, method))
+				}
+			} else {
+				resp.File = append(resp.File, generate(req, file, service))
+			}
 		}
 	}
 
@@ -51,6 +70,18 @@ func generate(
 	}
 }
 
+func generateMethod(
+	req *plugin.CodeGeneratorRequest,
+	file *descriptor.FileDescriptorProto,
+	service *descriptor.ServiceDescriptorProto,
+	method *descriptor.MethodDescriptorProto,
+) *plugin.CodeGeneratorResponse_File {
+	return &plugin.CodeGeneratorResponse_File{
+		Name:    str(methodInterfaceFilename(file, method.Name)),
+		Content: str(methodInterfaceBody(req, file, service, method)),
+	}
+}
+
 // helper to convert string into string pointer
 func str(str string) *string {
 	return &str
diff --git a/cmd/protoc-gen-php-grpc/php/template_method_interface.go b/cmd/protoc-gen-php-grpc/php/template_method_interface.go
new file mode 100644
index 0000000..0b4b87a
--- /dev/null
+++ b/cmd/protoc-gen-php-grpc/php/template_method_interface.go
@@ -0,0 +1,112 @@
+// MIT License
+//
+// Copyright (c) 2018 SpiralScout
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in all
+// copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+// SOFTWARE.
+
+package php
+
+import (
+	"bytes"
+	"fmt"
+	"strings"
+	"text/template"
+
+	"github.com/golang/protobuf/protoc-gen-go/descriptor"
+	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
+)
+
+var method_tpl *template.Template
+
+func init() {
+	method_tpl = template.Must(template.New("phpBody").Funcs(template.FuncMap{
+		"interface": func(name *string) string {
+			return identifier(*name, "MethodInterface")
+		},
+		"name": func(ns *ns, name *string) string {
+			return ns.resolve(name)
+		},
+	}).Parse(`<?php
+# Generated by the protocol buffer compiler (spiral/php-grpc). DO NOT EDIT!
+# source: {{ .File.Name }}
+# method: {{ .Method.Name }}
+{{ $ns := .Namespace -}}
+{{if $ns.Namespace}}
+namespace {{ $ns.Namespace }};
+{{end}}
+use Spiral\GRPC;
+{{- range $n := $ns.Import}}
+use {{ $n }};
+{{- end}}
+
+interface {{ .Method.Name | interface }} extends GRPC\MethodInterface
+{
+    // GRPC specific service and method name.
+    public const NAME = "{{ .File.Package }}.{{ .Service.Name }}/{{ .Method.Name }}";
+
+    /**
+     * @param GRPC\ContextInterface $ctx
+     * @param {{ name $ns .Method.InputType }} $in
+     * @return {{ name $ns .Method.OutputType }}
+     *
+     * @throws GRPC\Exception\InvokeException
+     */
+    public function __invoke(GRPC\ContextInterface $ctx, {{ name $ns .Method.InputType }} $in): {{ name $ns .Method.OutputType }};
+}
+`))
+}
+
+// generate php filename
+func methodInterfaceFilename(file *descriptor.FileDescriptorProto, methodName *string) string {
+	ns := namespace(file.Package, "/")
+	if file.Options != nil && file.Options.PhpNamespace != nil {
+		ns = strings.Replace(*file.Options.PhpNamespace, `\`, `/`, -1)
+	}
+
+	return fmt.Sprintf("%s/%s.php", ns, identifier(*methodName, "MethodInterface"))
+}
+
+// generate php file body
+func methodInterfaceBody(
+	req *plugin.CodeGeneratorRequest,
+	file *descriptor.FileDescriptorProto,
+	service *descriptor.ServiceDescriptorProto,
+	method *descriptor.MethodDescriptorProto,
+) string {
+	out := bytes.NewBuffer(nil)
+
+	data := struct {
+		Namespace *ns
+		File      *descriptor.FileDescriptorProto
+		Service   *descriptor.ServiceDescriptorProto
+		Method    *descriptor.MethodDescriptorProto
+	}{
+		Namespace: newNamespace(req, file, service),
+		File:      file,
+		Service:   service,
+		Method:   method,
+	}
+
+	err := method_tpl.Execute(out, data)
+	if err != nil {
+		panic(err)
+	}
+
+	return out.String()
+}
diff --git a/cmd/protoc-gen-php-grpc/php/template.go b/cmd/protoc-gen-php-grpc/php/template_service_interface.go
similarity index 94%
rename from cmd/protoc-gen-php-grpc/php/template.go
rename to cmd/protoc-gen-php-grpc/php/template_service_interface.go
index 291758b..850bd84 100644
--- a/cmd/protoc-gen-php-grpc/php/template.go
+++ b/cmd/protoc-gen-php-grpc/php/template_service_interface.go
@@ -25,14 +25,23 @@ package php
 import (
 	"bytes"
 	"fmt"
-	"strings"
-	"text/template"
-
 	"github.com/golang/protobuf/protoc-gen-go/descriptor"
 	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
+	"strings"
+	"text/template"
 )
 
-const phpBody = `<?php
+var service_tpl *template.Template
+
+func init() {
+	service_tpl = template.Must(template.New("phpBody").Funcs(template.FuncMap{
+		"interface": func(name *string) string {
+			return identifier(*name, "interface")
+		},
+		"name": func(ns *ns, name *string) string {
+			return ns.resolve(name)
+		},
+	}).Parse(`<?php
 # Generated by the protocol buffer compiler (spiral/php-grpc). DO NOT EDIT!
 # source: {{ .File.Name }}
 {{ $ns := .Namespace -}}
@@ -59,21 +68,7 @@ interface {{ .Service.Name | interface }} extends GRPC\ServiceInterface
     public function {{ $m.Name }}(GRPC\ContextInterface $ctx, {{ name $ns $m.InputType }} $in): {{ name $ns $m.OutputType }};
 {{end -}}
 }
-`
-
-type imports []string
-
-var tpl *template.Template
-
-func init() {
-	tpl = template.Must(template.New("phpBody").Funcs(template.FuncMap{
-		"interface": func(name *string) string {
-			return identifier(*name, "interface")
-		},
-		"name": func(ns *ns, name *string) string {
-			return ns.resolve(name)
-		},
-	}).Parse(phpBody))
+`))
 }
 
 // generate php filename
@@ -104,7 +99,7 @@ func body(
 		Service:   service,
 	}
 
-	err := tpl.Execute(out, data)
+	err := service_tpl.Execute(out, data)
 	if err != nil {
 		panic(err)
 	}
diff --git a/src/MethodInterface.php b/src/MethodInterface.php
new file mode 100644
index 0000000..aee28be
--- /dev/null
+++ b/src/MethodInterface.php
@@ -0,0 +1,19 @@
+<?php
+
+/**
+ * Spiral Framework.
+ *
+ * @license   MIT
+ * @author    Alexandr Zolotukhin (supersmile2009)
+ */
+
+declare(strict_types=1);
+
+namespace Spiral\GRPC;
+
+/**
+ * Indicates that given class expected to be GRPC service method.
+ */
+interface MethodInterface
+{
+}
